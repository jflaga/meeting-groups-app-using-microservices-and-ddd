@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation


@if (_isAuthenticated)
{
    <p>Sorry, you don't have access rights for this page. Try logging in with a different user or contact your administrator.</p>
}
else
{
    <p>Authenticating...</p>
}

@code {

    // NOTE: In "Blazor Samples: Blazor Web App with OpenID Connect (OIDC)" https://github.com/dotnet/blazor-samples/tree/main/8.0/BlazorWebAppOidc
    //       there is this PersistingAuthenticationStateProvider which has Task<AuthenticationState>.
    //       If you understood correctly, that is used for Blazor WebAssembly (WASM).
    [CascadingParameter]
    private Task<AuthenticationState> _authenticationStateTask { get; set; }

    private bool _isAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authenticationStateTask;

        _isAuthenticated = authState.User.Identity.IsAuthenticated;

        if (!_isAuthenticated)
        {
            // Navigation.NavigateTo($"Login?redirectUri={Uri.EscapeDataString(Navigation.Uri)}", true);
            Navigation.NavigateTo($"authentication/login?returnUrl={Uri.EscapeDataString(Navigation.Uri)}", forceLoad: true);
        }
    }
}
